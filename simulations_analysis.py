#For each simulation file generated by simulations.py, this script iterates over each mutation site 
#Records the frequency of ancestral and alternate allele by population at each site

import stdpopsim
import msprime
import tskit
import os
import itertools
import pandas as pd

#Establish list of models and dfes
model_list = {"3I21":"OutOfAfricaExtendedNeandertalAdmixturePulse_3I21",
              "3G09":"OutOfAfrica_3G09",
              "2T12":"OutOfAfrica_2T12", 
              "9K19":"AncientEurasia_9K19", 
              "10J19":"PapuansOutOfAfrica_10J19",
              "4J17":"OutOfAfrica_4J17"}
dfe_list = {"Z21":"GammaPos_Z21",
            "K23":"Mixed_K23",
            "K17":"Gamma_K17"}

#Get SLURM task ID
task_id = int(os.environ.get("SLURM_ARRAY_TASK_ID", 0))  # defaults to 0 if not running in array.

# Build a list of all combinations (model_id, dfe_id, chromosome)
all_tasks = list(itertools.product(model_list.items(), dfe_list.items(), range(1, 23)))

# Get corresponding parameters
(model_id, model), (dfe_id, dfe), chrom = all_tasks[task_id]


file_path = f"all_chrom_outputs/{dfe_id}_{model_id}_chr{chrom}_freq_differences4.csv"
# Check if the file already exists and is non-empty
if os.path.isfile(file_path) and os.path.getsize(file_path) > 0:
    print(f"Skipping {file_path}: already exists and is non-empty.")
else:
    # Load tree sequence
    ts = tskit.load(f"all_simulations/{dfe_id}_{model_id}_chr{chrom}.trees")
    # Get all population IDs present in the tree sequence
    population_ids = [pop.id for pop in ts.populations()]
    
    # Collect sample node IDs for each population
    pop_samples = {
        pop_id: set(ts.samples(population=pop_id))
        for pop_id in population_ids
        }
    
    # Store results per mutation
    mutation_freqs = []
    
    for site in ts.sites():
        for mutation in site.mutations:
                node_id = mutation.node
                derived_state = mutation.derived_state
                site_pos = site.position
    
                # Get the tree that contains this mutation's node
                tree = ts.at(site.position)
    
                # All samples descended from the mutation node (i.e., that carry it)
                carrier_samples = set(tree.samples(node_id))
    
                # Calculate mutation and ancestral in each population
                freqs_mut = {}
                freqs_anc = {}
                for pop_id, samples in pop_samples.items():
                    if len(samples) > 0:
                        freqs_mut[pop_id] = len(carrier_samples & samples) / len(samples)
                        freqs_anc[pop_id] = 1 - freqs_mut[pop_id]
                    else:
                        freqs_mut[pop_id] = float('nan')  # Avoid division by zero
                        freqs_anc[pop_id] = float('nan')
    
                #Store just the position and freq difference
                for pop_a, pop_b in itertools.combinations(population_ids, 2):
                    if (0 in (pop_a, pop_b)
                        and pop_a in freqs_mut and pop_b in freqs_mut
                        and pop_a in freqs_anc and pop_b in freqs_anc
                        and not pd.isna(freqs_mut[pop_a]) and not pd.isna(freqs_mut[pop_b])
                        and not pd.isna(freqs_anc[pop_a]) and not pd.isna(freqs_anc[pop_b])
                    ):
                        
                        diff = freqs_mut[pop_a] - freqs_mut[pop_b]
                        pop_a_diff = freqs_anc[pop_a] - freqs_mut[pop_a]
                        pop_b_diff = freqs_anc[pop_b] - freqs_mut[pop_b]
                        mutation_freqs.append({
                            "pop_a": pop_a,
                            "pop_a_freq":freqs_mut[pop_a],
                            "pop_b_freq":freqs_mut[pop_b],
                            "pop_b": pop_b,
                            "freq_diff": diff,
                            "pop_a_diff": pop_a_diff,
                            "pop_b_diff": pop_b_diff,
                             "(a-b)_diff": pop_a_diff - pop_b_diff,
                             "position": site_pos,
                                
                         })

    #Save to df 
    #Save df to csv
    df = pd.DataFrame(mutation_freqs)
    df.to_csv(f"all_chrom_outputs/{dfe_id}_{model_id}_chr{chrom}_freq_differences4.csv", index=False)
    print(f"Processed: {dfe_id} / {model_id} / chr{chrom} | Mutations: {len(df)}")
